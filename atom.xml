<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Tony Mkhael</title>
 <link href="tonymkhael.github.io/atom.xml" rel="self"/>
 <link href="tonymkhael.github.io/"/>
 <updated>2016-07-28T00:53:11+00:00</updated>
 <id>tonymkhael.github.io</id>
 <author>
   <name>Tony Mkhael</name>
   <email>tony.mkhael@gmail.com</email>
 </author>

 
 <entry>
   <title>Semantic versioning</title>
   <link href="tonymkhael.github.io/oss/2016/07/06/semantic-versioning/"/>
   <updated>2016-07-06T17:27:29+00:00</updated>
   <id>tonymkhael.github.io/oss/2016/07/06/semantic-versioning</id>
   <content type="html">&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_what-is-this-about&quot;&gt;1. What is this about?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_detailed-guide&quot;&gt;2. Detailed guide&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_setting-up-your-project&quot;&gt;2.1. Setting up your project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_building-the-project&quot;&gt;2.2. Building the project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_adding-javadoc-and-source-jars&quot;&gt;2.3. Adding javadoc and source jars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_adding-some-cool-documentation&quot;&gt;2.4. Adding some cool documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_publishing-the-artifacts&quot;&gt;2.5. Publishing the artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_semantic-versioning&quot;&gt;2.6. Semantic versioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_the-ci-part&quot;&gt;2.7. The CI part&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_putting-it-all-together&quot;&gt;3. Putting it all together&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what-is-this-about&quot;&gt;1. What is this about?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;if you&amp;#8217;re unfamiliar with semantic versioning, please start reading &lt;a href=&quot;http://semver.org/&quot;&gt;Here&lt;/a&gt;.
The rest of the document will focus on how to effectively use semantic versioning for your OSS projects.
It will guide you in detail through all the steps needed to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Setup a project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building it using gradle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documenting using javadoc and asciidoctor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Publishing to a nexus repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handling versioning using nebula&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is not about general guidelines or so, but merely a simple tutorial on how to put all the available bricks together in order
to have a OSS compliant project. It contains useful snippets you will/should probably use variants of in your OSS project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_detailed-guide&quot;&gt;2. Detailed guide&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this tutorial, we will interact with the below tools/libraries.
Although no specific knowledge is required, it is always better to have a quick look around to see what&amp;#8217;s behind each one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.gradle.org&quot;&gt;Gradle&lt;/a&gt;: Highly flexible build tool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.asciidoctor.org&quot;&gt;Asciidoctor&lt;/a&gt;: Toolset to generate cool documentation from pure text format&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nebula-plugins.github.io/&quot;&gt;Nebula&lt;/a&gt;: Gradle plugins provided by NetFlix&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jenkins-ci.org/&quot;&gt;Jenkins CI&lt;/a&gt;: Continuous delivery server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sonatype.org/nexus/&quot;&gt;Nexus&lt;/a&gt;: Maven repository server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_setting-up-your-project&quot;&gt;2.1. Setting up your project&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s start by setting up the gradle project. For this you would need the following structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Project structure&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt;&amp;gt; build.gradle &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&amp;gt;&amp;gt; gradle
&amp;gt;&amp;gt;&amp;gt; wrapper
&amp;gt;&amp;gt;&amp;gt;&amp;gt; gradle-wrapper.properties &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&amp;gt;&amp;gt;&amp;gt;&amp;gt; gradle-wrapper.jar
&amp;gt;&amp;gt; gradlew &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&amp;gt;&amp;gt; gradlew.bat&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The main gradle script for your project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The gradle wrapper files to specify the gradle version to use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The gradle command line scripts&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Except for the build.gradle, you can use the exact copy of all files &lt;a href=&quot;http://www.github.com/tonymkhael/semantic-versioning&quot;&gt;in this public repository&lt;/a&gt;, as those files do not change much and they only exist to bootstrap your gradle setup.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
It is necessary to have a gradle.properties file in the project root to be able to run some gradle tasks i.e. publish. You can also make it work if you&amp;#8217;re behind a proxy
You will not find this file in this repo, since it is supposed to be injected by the build environment (CI/Dev environment..)
However, here is a sample content that you should adapt in case you want to try out with this repo..
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;gradle.properties&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;#control daemon mode
org.gradle.daemon=true

#used for gradle JVM
systemProp.https.proxyHost=proxy
systemProp.https.proxyPort=3128
systemProp.http.proxyHost=proxy
systemProp.http.proxyPort=3128
systemProp.http.nonProxyHosts=*.domain.com|localhost

#use that specific JDK
org.gradle.java.home=C:\\myfavoritejdk\\

#used for the publishing
nexusGroup=com.acme
nexusHost=nexus-dev
nexusRepo=myrepo
nexusUser=user
nexusPassword=password&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let&amp;#8217;s make this a java project. we&amp;#8217;ll add the following java class under src/main/java/com/acme/example/SemanticVersioning.java&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package com.acme.example;

public final class SemanticVersioning {

  //tag::anchor[]

  /**
   * A sample for the javadoc
   *
   * @param args Tha arguments to this magnificient application
   * @since 0.0.1
   */
  public static void main(String[] args) {
    System.out.println(&quot;Hello Semantic versioning&quot;);
  }

  //end::anchor[]

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This also has to be reflected in the gradle script as below&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;project.group = nexusGroup &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
project.description = &#39;Semantic versioning&#39;

apply plugin: &#39;java&#39; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

repositories { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    jcenter()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Assign a group id and a description for the project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Apply the gradle java plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add jcenter as an artifact repository in case we need some useful libraries&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_building-the-project&quot;&gt;2.2. Building the project&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To build the project, all we need to done is invoke the gradle build task using&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Building the project&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;+&amp;gt; gradlew build
Starting a new Gradle Daemon for this build (subsequent builds will be faster).
Inferred project: semantic-versioning, version: 0.0.2-SNAPSHOT
:compileJava
:processResources UP-TO-DATE
:classes
:jar
:assemble
:compileTestJava UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build

BUILD SUCCESSFUL

Total time: 11.917 secs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The build artifacts are generated under the build directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Instead of trying to build your .gitignore from scratch, you can use &lt;a href=&quot;https://github.com/Netflix/gradle-template/blob/master/.gitignore&quot;&gt;Netflix&amp;#8217;s template&lt;/a&gt; which covers pretty much everything
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you need, at any time to look at the available tasks on your project you can use the tasks task.
Here&amp;#8217;s a sample usage with the output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;List gradle tasks&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;+&amp;gt; gradlew tasks
Inferred project: semantic-versioning, version: 0.0.2-SNAPSHOT
:tasks

------------------------------------------------------------
All tasks runnable from root project - Semantic versioning
------------------------------------------------------------

Build tasks
-----------
assemble - Assembles the outputs of this project.
build - Assembles and tests this project.
buildDependents - Assembles and tests this project and all projects that depend on it.
buildNeeded - Assembles and tests this project and all projects it depends on.
classes - Assembles classes &#39;main&#39;.
clean - Deletes the build directory.
jar - Assembles a jar archive containing the main classes.
testClasses - Assembles classes &#39;test&#39;.

Build Setup tasks
-----------------
init - Initializes a new Gradle build. [incubating]

Documentation tasks
-------------------
asciidoctor - Converts AsciiDoc files and copies the output files and related resources to the build directory.
javadoc - Generates Javadoc API documentation for the main source code.

Help tasks
----------
components - Displays the components produced by root project &#39;semantic-versioning&#39;. [incubating]
dependencies - Displays all dependencies declared in root project &#39;semantic-versioning&#39;.
dependencyInsight - Displays the insight into a specific dependency in root project &#39;semantic-versioning&#39;.
help - Displays a help message.
model - Displays the configuration model of root project &#39;semantic-versioning&#39;. [incubating]
projects - Displays the sub-projects of root project &#39;semantic-versioning&#39;.
properties - Displays the properties of root project &#39;semantic-versioning&#39;.
tasks - Displays the tasks runnable from root project &#39;semantic-versioning&#39;.

JRuby tasks
-----------
jrubyGenerateGradleRb - Generate a gradle.rb stub for executing Ruby binstubs
jrubyPrepare - Pre-cache and prepare all dependencies (jars and gems)
jrubyPrepareGems - Prepare the gems from the `gem` dependencies, extracts into jruby.installGemDir
jrubyPrepareJars - Prepare the jar dependencies from the `gem` dependencies, collect them into

Nebula Release tasks
--------------------
candidate
devSnapshot
final
releaseCheck
snapshot

Upload tasks
------------
uploadArchives - Uploads all artifacts belonging to configuration &#39;:archives&#39;

Verification tasks
------------------
check - Runs all checks.
test - Runs the unit tests.

Other tasks
-----------
generateHtml5
install - Installs the &#39;archives&#39; artifacts into the local Maven repository.
release - Releases this project.
wrapper

Rules
-----
Pattern: clean&amp;lt;TaskName&amp;gt;: Cleans the output files of a task.
Pattern: build&amp;lt;ConfigurationName&amp;gt;: Assembles the artifacts of a configuration.
Pattern: upload&amp;lt;ConfigurationName&amp;gt;: Assembles and uploads the artifacts belonging to a configuration.

To see all tasks and more detail, run gradlew tasks --all

To see more detail about a task, run gradlew help --task &amp;lt;task&amp;gt;

BUILD SUCCESSFUL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_adding-javadoc-and-source-jars&quot;&gt;2.3. Adding javadoc and source jars&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is nothing simpler than that when using Nebula tools (provided by NetFlix).
Nebula consists of a set of plugins that are opinionated with the Netflix style, but should work really well for you when you follow their standard approach&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;plugins {
    id &#39;nebula.project&#39; version &#39;3.2.1&#39; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}

apply plugin: &#39;nebula.project&#39; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This instructs gradle to use the nebula project plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Applies the nebula project plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The nebula project plugin provides the following&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Builds Javadoc and Sources jars&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Record information about the build and stores it in the .jar, via gradle-info-plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easy specification of people involved in a project via gradle-contacts-plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Doesn&amp;#8217;t fail javadoc if there are none found&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you run gradlew tasks, you can now see the additional tasks in the build category:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Newly added tasks&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;Build tasks
-----------
assemble - Assembles the outputs of this project.
build - Assembles and tests this project.
buildDependents - Assembles and tests this project and all projects that depend on it.
buildNeeded - Assembles and tests this project and all projects it depends on.
classes - Assembles classes &#39;main&#39;.
clean - Deletes the build directory.
jar - Assembles a jar archive containing the main classes.
javadocJar &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
sourceJar &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
testClasses - Assembles classes &#39;test&#39;.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The java doc jar tasks which creates the artifact-javadoc.jar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The source jar tasks which creates the artifact-sources.jar&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Those new artifacts can be built by invoking gradlew javadocJar sourceJar build&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_adding-some-cool-documentation&quot;&gt;2.4. Adding some cool documentation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Asciidoctor is a really useful tool when it comes to technical documentation in all its forms: Tutorials, User guides, HowTos, FAQs etc..
It is yet another markdown format, enriched by many plugins that you are encouraged to explore, such as diagrams, math equations, tree view etc..
Many of these asciidoctor extensions are used to generate the documentation you are actually reading&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gradle integrates nicely with Asciidoctor with the asciidoctor-gradle-plugin.
Here&amp;#8217;s a snippet on how to use it..&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;plugins {
    id &#39;org.asciidoctor.convert&#39; version &#39;1.5.2&#39; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    id &#39;com.github.jruby-gradle.base&#39; version &#39;0.3.0&#39;
}

dependencies {
    gems &#39;rubygems:asciidoctor-diagram:1.3.0&#39; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    asciidoctor &#39;com.github.allati.asciidoctor.monotree:asciidoctor-extension-monotree:0.0.1&#39;
    asciidoctor &#39;org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.8&#39;
}

apply plugin: &#39;com.github.jruby-gradle.base&#39; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
apply plugin: &#39;org.asciidoctor.convert&#39;

class AsciiDoctorDefault extends org.asciidoctor.gradle.AsciidoctorTask { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

    AsciiDoctorDefault() {

        resources {
            from(sourceDir) {
                include &#39;css/**&#39;
                include &#39;images/**&#39;
            }
        }

        requires &#39;asciidoctor-diagram&#39;

        attributes &#39;build-gradle&#39;: new File(&#39;build.gradle&#39;),
                &#39;source-highlighter&#39;: &#39;highlightjs&#39;,
                &#39;highlightjs-theme&#39;: &#39;github&#39;,
                &#39;sourceDir&#39;: &#39;../../main/java&#39;,
                &#39;rootDir&#39;: &#39;../../../&#39;,
                &#39;imagesdir&#39;: &#39;images&#39;,
                &#39;imagesoutdir&#39;: &#39;images&#39;,
                &#39;setanchors&#39;: &#39;true&#39;,
                &#39;idprefix&#39;: &#39;&#39;,
                &#39;idseparator&#39;: &#39;-&#39;,
                &#39;docinfo1&#39;: &#39;true&#39;,
                &#39;docVersion&#39;: project.version.toString()
    }

}

task(generateHtml5, type: AsciiDoctorDefault) { &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    dependsOn jrubyPrepareGems
    gemPath jrubyPrepareGems.outputDir
    backends &#39;html5&#39;
}

task(generatePdf, type: AsciiDoctorDefault) { &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
    dependsOn jrubyPrepareGems
    gemPath jrubyPrepareGems.outputDir
    backends &#39;pdf&#39;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add plugins asciidoctor and jruby (to allow using asciidoctor extensions written in ruby on the gradle jvm)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add some asciidoctor extensions, such as diagrams and monotree&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Apply the plugins&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Define a base task extending the asciidoctor provided tasks to fill in some defaults&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add a task to generate documentation with html5 backend&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add a task to generate documentation with pdf backend&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_publishing-the-artifacts&quot;&gt;2.5. Publishing the artifacts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the useful things nebula project plugin does, is add publishing support to maven repositories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;publishing { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    repositories { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        maven {
            url &quot;http://${nexusHost}/content/repositories/${nexusRepo}-${project.version.toString().endsWith(&#39;-SNAPSHOT&#39;) ? &#39;snapshots&#39; : &#39;releases&#39;}&quot;
            &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
            credentials {
                username &quot;${nexusUser}&quot;
                password &quot;${nexusPassword}&quot;
            }
        }
        mavenLocal()
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure the publishing (gradle maven-publish-plugin)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure some maven repositories for publishing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add a nexus repository hosted on myserver, suffixed by {versiontype}, with versiontype being either empty or &quot;-SNAPSHOT&quot; (more on that on the nebula section)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_semantic-versioning&quot;&gt;2.6. Semantic versioning&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now comes the real question on how to version our project, and how to define its release cycle.
Again nebula comes to the rescue by providing the Netflix biased way via the nebula release plugin, which should be enough for whatever needs you have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The way it works is really simple, especially compared to the traditional maven way with project versions cluttering in the pom.xml files everywhere, the maven-release-plugin
which has to modify poms, commit them, push the changes.. but when it doesn&amp;#8217;t work you must rollback.. what would you configure on a CI environment.. You see the point..&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having the version tag in the sources is redundant with the SCM information. The version can be infered from the SCM commit (by traversing the tree).
With this in mind, a release is simply a tag on a specific commit that marks the state of the versioned code at a certain commit (or point in time).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s what you need to do in order to use nebula release plugin&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;plugins {
    id &#39;nebula.nebula-release&#39; version &#39;4.0.1&#39; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}

apply plugin: &#39;nebula.nebula-release&#39; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

release { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    // Let the default versioning strategy be the maven style -SNAPSHOT, instead of nebula&#39;s devSnapshot
    defaultVersionStrategy = org.ajoberstar.gradle.git.release.opinion.Strategies.SNAPSHOT
}

tasks.release.finalizedBy tasks.publish &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the nebula release plugin to the scope of our project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Apply the plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure the plugin in order to use -SNAPSHOT suffixes for snapshot versions to stick to the maven convention&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Automatically publish the artifacts whenever a &quot;release&quot; happpens&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In nebula&amp;#8217;s terms, a release can be one of the below&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;View nebula release tasks&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;+&amp;gt; gradlew tasks
Nebula Release tasks
--------------------
candidate &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
devSnapshot
final &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
releaseCheck
snapshot &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Releasing a release candidate as a preview version of our project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Releasing a version of our project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&quot;Releasing&quot; a snapshot version of our project&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;snapshot and devSnapshot tasks will not tag the repository. And with the finalize task we have, it will simply publish the latest snapshot to the repository.
candidate and final tasks are a bit different, where they require no uncommited changes, and then tag the current commit with target release version&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To bootstrap this whole thing, all you need to do is tag the very first version manually using for example&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;git tag &quot;v.0.0.1&quot; // tags the current branch tip to have the 0.0.1 version.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From here on, whenever you need to bump the version (i.e. release your product), you can use one of the tasks the nebula release plugin provides.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a concrete example, here we simulate a very basic flow:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Sample flow: Making some changes&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;+&amp;gt; touch bla
+&amp;gt; git add bla
+&amp;gt; git commit -m &quot;my bla change&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now some user really needs our bla changes, so we will make a release of our project!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Sample flow: The release candidate&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;+&amp;gt; gradlew candidate
Inferred project: semantic-versioning, version: 0.1.0-rc.1
Unable to determine the host name on this Windows instance
:releaseCheck
:candidate
:prepare
:compileJava
:processResources UP-TO-DATE
:classes
:writeManifestProperties
:jar
:assemble
:compileTestJava UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build
:release
Tagging repository as v0.1.0-rc.1
Pushing changes in [refs/heads/master, v0.1.0-rc.1] to origin
:generatePomFileForNebulaPublication
:javadoc
:javadocJar
:sourceJar
:publishNebulaPublicationToMavenLocalRepository
:publishNebulaPublicationToMavenRepository
Upload http://myserver/content/repositories/myrepo-releases/com/acme/example/semantic-versioning/0.1.0-rc.1/semantic-versioning-0.1.0-rc.1.jar
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What happened here? Well, simply the following&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The project is built (compiled, packaged with sources and javadoc etc..)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The repository is tagged with v0.1.0-rc.1 and the tag is pushed to the remote git repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The artifacts (with the new RC version) are published to the configured maven repository&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now suppose the candidate is ready to be released, we can do it using&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Sample flow: The official release&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;+&amp;gt; gradlew final
Inferred project: semantic-versioning, version: 0.1.0
Unable to determine the host name on this Windows instance
:releaseCheck
:final
:prepare
:compileJava UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:writeManifestProperties
:jar
:assemble
:compileTestJava UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build
:release
Tagging repository as v0.1.0
Pushing changes in [refs/heads/master, v0.1.0] to origin
:generatePomFileForNebulaPublication
:javadoc
:javadocJar
:sourceJar
:publishNebulaPublicationToMavenLocalRepository
:publishNebulaPublicationToMavenRepository
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, the same operations occur, this time tagging the scm repository with v0.1.0 and publishing the artifacts
The next development version will be 0.1.1-SNAPSHOT&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Viewing the next dev version&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;+&amp;gt; gradlew tasks
Inferred project: semantic-versioning, version: 0.1.1-SNAPSHOT&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can always manually bump the version, or force it when release using respectively&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;gradlew &amp;lt;snapshot|devSnapshot|candidate|final&amp;gt; -Prelease.scope=&amp;lt;major|minor|patch&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
gradlew &amp;lt;candidate|final&amp;gt; -Prelease.version=1.2.3 &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Choose the release scope of the operation by specifying which part of the version to bump&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Force a release version instead of nebula&amp;#8217;s scheme&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the-ci-part&quot;&gt;2.7. The CI part&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we assume you have a jenkins server running somewhere, with the &quot;new&quot; pipelines scripts.
We will be creating 2 jobs, 1 for building the project, another to handle the release part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will create a jenkins pipeline, and the Jenkinsfile describing the build steps is in the repo under ./Jenkinsfile
Here&amp;#8217;s the content&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;node(&#39;master&#39;) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

   // Mark the code checkout &#39;stage&#39;....
   stage &#39;Checkout&#39;

   // Get the code from the Stash repository
   checkout scm &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

   // Mark the code build &#39;stage&#39;....
   stage &#39;Build&#39;

   // Make sure script is runnable
   sh &quot;chmod a+x ./gradlew&quot;

   // Run gradle build and deploy &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
   wrap([$class: &#39;ConfigFileBuildWrapper&#39;, managedFiles: [[fileId: &#39;org.jenkinsci.plugins.configfiles.custom.CustomConfig1453803770046&#39;, replaceTokens: false, targetLocation: &#39;gradle.properties&#39;, variable: &#39;&#39;]]]) {
    sh &quot;./gradlew snapshot generateHtml5 generatePdf --stacktrace&quot;
   }

   publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: &#39;build/asciidoc/html5&#39;, reportFiles: &#39;semantic-versioning.html&#39;, reportName: &#39;Documentation&#39;]) &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Allocate the node master for the build&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Checkout the git repo (no repo is specified because it is infered by jenkins when using Jenkinsfile)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run the snapshot, generateHtml5 and generatePdf tasks, after injecting the gradle.properties from a configured file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Publish the html5 documentation on jenkins&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_putting-it-all-together&quot;&gt;3. Putting it all together&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, we have done the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Created a java project using gradle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generated javadoc and a user guide&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Played around with versioning and release cycle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrated with Jenkins pipelines&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All those parts are essential (but not sufficient) for any OSS project, of whatever size.
This tutorial focused on the technical aspects, but there are more to it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Licensing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contributor guide&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;..&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can have more on this on the Netflix nebula page &lt;a href=&quot;https://nebula-plugins.github.io/&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the full contents of the build.gradle used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;//tag::nebula-release[]
plugins {
    id &#39;nebula.nebula-release&#39; version &#39;4.0.1&#39; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}

//end::nebula-release[]

//tag::asciidoctor[]
plugins {
    id &#39;org.asciidoctor.convert&#39; version &#39;1.5.2&#39; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    id &#39;com.github.jruby-gradle.base&#39; version &#39;0.3.0&#39;
}

//end::asciidoctor[]

//tag::nebula-project[]
plugins {
    id &#39;nebula.project&#39; version &#39;3.2.1&#39; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}

//end::nebula-project[]

//tag::java[]
project.group = nexusGroup &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
project.description = &#39;Semantic versioning&#39;

//end::java[]

//tag::asciidoctor[]
dependencies {
    gems &#39;rubygems:asciidoctor-diagram:1.3.0&#39; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    asciidoctor &#39;com.github.allati.asciidoctor.monotree:asciidoctor-extension-monotree:0.0.1&#39;
    asciidoctor &#39;org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.8&#39;
}

//end::asciidoctor[]

//tag::java[]
apply plugin: &#39;java&#39; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

//end::java[]

//tag::nebula-project[]
apply plugin: &#39;nebula.project&#39; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

//end::nebula-project[]

//tag::asciidoctor[]
apply plugin: &#39;com.github.jruby-gradle.base&#39; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
apply plugin: &#39;org.asciidoctor.convert&#39;

//end::asciidoctor[]

//tag::java[]
repositories { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    jcenter()
}

//end::java[]

//tag::publishing[]
publishing { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    repositories { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        maven {
            url &quot;http://${nexusHost}/content/repositories/${nexusRepo}-${project.version.toString().endsWith(&#39;-SNAPSHOT&#39;) ? &#39;snapshots&#39; : &#39;releases&#39;}&quot;
            &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
            credentials {
                username &quot;${nexusUser}&quot;
                password &quot;${nexusPassword}&quot;
            }
        }
        mavenLocal()
    }
}

//end::publishing[]

//tag::nebula-release[]
apply plugin: &#39;nebula.nebula-release&#39; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

release { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    // Let the default versioning strategy be the maven style -SNAPSHOT, instead of nebula&#39;s devSnapshot
    defaultVersionStrategy = org.ajoberstar.gradle.git.release.opinion.Strategies.SNAPSHOT
}

tasks.release.finalizedBy tasks.publish &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

//end::nebula-release[]

//tag::asciidoctor[]
class AsciiDoctorDefault extends org.asciidoctor.gradle.AsciidoctorTask { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

    AsciiDoctorDefault() {

        resources {
            from(sourceDir) {
                include &#39;css/**&#39;
                include &#39;images/**&#39;
            }
        }

        requires &#39;asciidoctor-diagram&#39;

        attributes &#39;build-gradle&#39;: new File(&#39;build.gradle&#39;),
                &#39;source-highlighter&#39;: &#39;highlightjs&#39;,
                &#39;highlightjs-theme&#39;: &#39;github&#39;,
                &#39;sourceDir&#39;: &#39;../../main/java&#39;,
                &#39;rootDir&#39;: &#39;../../../&#39;,
                &#39;imagesdir&#39;: &#39;images&#39;,
                &#39;imagesoutdir&#39;: &#39;images&#39;,
                &#39;setanchors&#39;: &#39;true&#39;,
                &#39;idprefix&#39;: &#39;&#39;,
                &#39;idseparator&#39;: &#39;-&#39;,
                &#39;docinfo1&#39;: &#39;true&#39;,
                &#39;docVersion&#39;: project.version.toString()
    }

}

task(generateHtml5, type: AsciiDoctorDefault) { &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    dependsOn jrubyPrepareGems
    gemPath jrubyPrepareGems.outputDir
    backends &#39;html5&#39;
}

task(generatePdf, type: AsciiDoctorDefault) { &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
    dependsOn jrubyPrepareGems
    gemPath jrubyPrepareGems.outputDir
    backends &#39;pdf&#39;
}

//end::asciidoctor[]

task wrapper(type: Wrapper) {
    gradleVersion = &#39;2.6&#39;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find the full sources &lt;a href=&quot;http://www.github.com/tonymkhael/semantic-versioning&quot;&gt;in this public repository&lt;/a&gt;.
Thank you for making it this far, and hope this helps you in some way!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
 </entry>
 

</feed>
